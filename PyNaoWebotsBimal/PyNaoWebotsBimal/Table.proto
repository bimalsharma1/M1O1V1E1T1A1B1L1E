#VRML_SIM V8.1.0 utf8
# Customizable table

PROTO TableWithPhysics [
  field SFVec3f    translation         0 0 0
  field SFRotation rotation            0 1 0 0
  field SFVec3f    size                0.2 0.4 0.8
  field SFVec2f    feetSize            0.01 0.01
  field SFFloat    feetPadding         0.01
  field SFFloat    frameThickness      0.02
  field SFFloat    trayTransparency    0.01
  field MFString   trayTextureUrl      "textures/wood.jpg"
  field SFVec2f    trayTileSize        0.02 0.02
  field MFString   feetTextureUrl      "textures/wood.jpg"
  field SFVec2f    feetTileSize        0.02 0.02
  field SFFloat    mass                0.5
]
{
  %{
    -- parameters check
    local size = fields.size.value
    if size.x <= 0.0 or size.y <= 0.0 or size.z <= 0.0 then -- avoid a negative values
      size = fields.size.defaultValue
      io.stderr:write("'size' must contain positive values\n")
    end

    local feetSize = fields.feetSize.value
    if feetSize.x < 0.0 or feetSize.y < 0.0 then -- avoid a negative values
      feetSize = fields.feetSize.defaultValue
      io.stderr:write("'feetSize' must contain positive values\n")
    end

    local trayTileSize = fields.trayTileSize.value
    if trayTileSize.x <= 0.0 or trayTileSize.y <= 0.0 then -- avoid a zero division and negative values
      trayTileSize = fields.trayTileSize.defaultValue
      io.stderr:write("'trayTileSize' must contain positive values\n")
    end

    local feetTileSize = fields.feetTileSize.value
    if feetTileSize.x <= 0.0 or feetTileSize.y <= 0.0 then -- avoid a zero division and negative values
      feetTileSize = fields.feetTileSize.defaultValue
      io.stderr:write("'feetTileSize' must contain positive values\n")
    end

    local feetPadding = fields.feetPadding.value
    if feetPadding < 0.0 then
      io.stderr:write("'feetPadding' must be positive\n")
      feetPadding = fields.feetPadding.defaultValue
    end

    local frameThickness = fields.frameThickness.value
    if frameThickness <= 0.0 then
      io.stderr:write("'frameThickness' must be positive\n")
      frameThickness = fields.frameThickness.defaultValue
    end

    -- global stuff
    local mainFrameSize = { x = size.x; y = frameThickness; z = size.z }
    local feetTextureFactor = math.max(feetSize.x, feetSize.y)
    local feetTranslation = { x = 0.5 * size.x - feetPadding - 0.5 * feetSize.x; y = 0.5 * (size.y - frameThickness); z = 0.5 * size.z - feetPadding - 0.5 * feetSize.y }
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      # Main frame
      SolidBox {
        translation 0 %{= size.y - 0.5 * frameThickness }% 0
        size %{= mainFrameSize.x }% %{= mainFrameSize.y }% %{= mainFrameSize.z }%
        appearance Appearance {
          material Material {
            transparency IS trayTransparency
          }
          texture ImageTexture {
            url IS trayTextureUrl
          }
          textureTransform TextureTransform {
             %{ local frameTextureFactor = math.max(mainFrameSize.x, mainFrameSize.y, mainFrameSize.z) }%
             scale %{= frameTextureFactor / trayTileSize.x }% %{= frameTextureFactor / trayTileSize.y }%
          }
        }
        %{ if fields.mass.value > 0 then }%
          physics Physics {
            density -1
            mass %{= fields.mass.value / 6 }%
          } 
        %{ end }%
      }
      %{ if feetSize.x ~= 0.0 and feetSize.y ~= 0.0 then }%
        # Foot 1
        SolidBox {
          translation %{= feetTranslation.x }% %{= feetTranslation.y }% %{= feetTranslation.z }%
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance DEF FOOT_APPEARANCE Appearance {
            material Material {
            }
            texture ImageTexture {
              url IS feetTextureUrl
            }
            textureTransform TextureTransform {
              scale %{= feetTextureFactor / feetTileSize.x }% %{= feetTextureFactor / feetTileSize.y }%
            }
          }
          %{ if fields.mass.value > 0 then }%
            physics Physics {
              density -1
              mass %{= fields.mass.value / 6 }%
            } 
          %{ end }%
        }
        # Foot 2
        SolidBox {
          translation %{= -feetTranslation.x }% %{= feetTranslation.y }% %{= feetTranslation.z }%
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance USE FOOT_APPEARANCE
          %{ if fields.mass.value > 0 then }%
            physics Physics {
              density -1
              mass %{= fields.mass.value / 6 }%
            } 
          %{ end }%
        }
        # Foot 3
        SolidBox {
          translation %{= feetTranslation.x }% %{= feetTranslation.y }% %{= -feetTranslation.z }%
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance USE FOOT_APPEARANCE
          %{ if fields.mass.value > 0 then }%
            physics Physics {
              density -1
              mass %{= fields.mass.value / 6 }%
            } 
          %{ end }%
        }
        # Foot 4
        SolidBox {
          translation %{= -feetTranslation.x }% %{= feetTranslation.y }% %{= -feetTranslation.z }%
          size %{= feetSize.x }% %{= size.y - frameThickness }% %{= feetSize.y }%
          appearance USE FOOT_APPEARANCE
          %{ if fields.mass.value > 0 then }%
            physics Physics {
              density -1
              mass %{= fields.mass.value / 6 }%
            } 
          %{ end }%
        }
      %{ end }%
    ]
    %{ if fields.mass.value > 0 then }%
      boundingObject Sphere {
        radius 0.01
      }
      physics Physics {
        density -1
        mass %{= fields.mass.value / 6 }%
      } 
    %{ end }%
  }
}
